schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Alert
  @join__owner(graph: ALERTS)
  @join__type(graph: ALERTS, key: "id")
{
  id: ID! @join__field(graph: ALERTS)
  message: String @join__field(graph: ALERTS)
}

input CreateHostInput {
  id: String!
  name: String!
}

type CreateHostResponse implements MutationResponse {
  code: String!
  host: Host
  message: String!
  success: Boolean!
}

input CreateUserInput {
  email: String!
  name: String!
}

type CreateUserResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
  user: User
}

type Host
  @join__owner(graph: ROOT)
  @join__type(graph: ROOT, key: "id")
{
  id: ID! @join__field(graph: ROOT)
  name: String @join__field(graph: ROOT)
}

type Mutation {
  createHost(input: CreateHostInput!): CreateHostResponse! @join__field(graph: ROOT)
  createUser(input: CreateUserInput): CreateUserResponse! @join__field(graph: USERS)
}

interface MutationResponse {
  code: String!
  message: String!
  success: Boolean!
}

type Notice
  @join__owner(graph: NOTICES)
  @join__type(graph: NOTICES, key: "id")
{
  description: String @join__field(graph: NOTICES)
  id: ID! @join__field(graph: NOTICES)
  title: String @join__field(graph: NOTICES)
}

type Query {
  hosts: [Host] @join__field(graph: ROOT)
  user(id: String!): User! @join__field(graph: USERS)
  users: [User] @join__field(graph: USERS)
}

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "id")
  @join__type(graph: ALERTS, key: "id")
  @join__type(graph: NOTICES, key: "id")
{
  alerts: [Alert] @join__field(graph: ALERTS)
  email: String @join__field(graph: USERS)
  id: ID! @join__field(graph: USERS)
  name: String @join__field(graph: USERS)
  notices: [Notice] @join__field(graph: NOTICES)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ALERTS @join__graph(name: "alerts" url: "http://alerts:4000/graphql")
  NOTICES @join__graph(name: "notices" url: "http://notices:4000/graphql")
  ROOT @join__graph(name: "root" url: "http://root:4000/graphql")
  USERS @join__graph(name: "users" url: "http://users:4000/graphql")
}
